buildscript {
    ext {
        generatedMapperSourcesDir = "${buildDir}/generated-src/mapstruct/main"
    }
}

configurations {
    providedRuntime
    mapstruct
}

dependencies {
//    compile project(':bonappetit-domain')
//    compile project(':bonappetit-server-persistence')

    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-jersey:${springBootVersion}")
//    compile "org.flywaydb:flyway-core:4.0.3"
//    runtime("com.h2database:h2")
    // https://mvnrepository.com/artifact/com.h2database/h2
//    runtime group: 'com.h2database', name: 'h2', version: '1.4.192'

    // Documentation
    compile "io.swagger:swagger-jersey2-jaxrs:${swaggerVersion}"
    compile('org.projectlombok:lombok:1.16.6')

    // Object mapping
    compile("org.mapstruct:mapstruct:${mapstructVersion}")
    mapstruct("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")

//    compile('org.springframework.boot:spring-boot-devtools')
//    compile('org.springframework.boot:spring-boot-starter-web')
//    runtime('mysql:mysql-connector-java')
}

sourceSets {
    main {
        ext.originalJavaSrcDirs = java.srcDirs
        java.srcDir "${generatedMapperSourcesDir}"
    }
}

task generateMainMapperClasses(type: JavaCompile) {
    ext.aptDumpDir = file("${buildDir}/tmp/apt/mapstruct")
    destinationDir = aptDumpDir

    classpath = compileJava.classpath + configurations.mapstruct
    source = sourceSets.main.originalJavaSrcDirs
    ext.sourceDestDir = file("$generatedMapperSourcesDir")

    options.define(
            compilerArgs: [
                    "-nowarn",
                    "-proc:only",
                    "-encoding", "UTF-8",
                    "-processor", "org.mapstruct.ap.MappingProcessor",
                    "-s", sourceDestDir.absolutePath,
                    "-source", sourceCompatibility,
                    "-target", targetCompatibility,
            ]
    );

    inputs.dir source
    outputs.dir generatedMapperSourcesDir;
    doFirst {
        sourceDestDir.mkdirs()
    }
    doLast {
        aptDumpDir.delete()
    }
}
compileJava.dependsOn generateMainMapperClasses