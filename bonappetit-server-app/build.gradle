buildscript {
    ext {
        springBootVersion = '1.3.3.RELEASE'
        generatedMapperSourcesDir = "${buildDir}/generated-src/mapstruct/main"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'
apply plugin: 'war'

war {
    baseName = 'bonappetit-server'
    version = version
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    providedRuntime
    mapstruct
}

dependencies {
    compile project(':bonappetit-core')
    compile project(':bonappetit-domain')
    compile project(':bonappetit-dto')
    compile project(':bonappetit-server-menu-management')
    compile project(':bonappetit-server-staff-management')

    // API
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile('org.springframework.boot:spring-boot-starter-jersey')

    // Security
    compile('org.springframework.boot:spring-boot-starter-security')

    // Monitoring
    compile("org.springframework.boot:spring-boot-starter-actuator")

    // Documentation
    compile "io.swagger:swagger-jersey2-jaxrs:${swaggerVersion}"

    // Object mapping
    compile("org.mapstruct:mapstruct:${mapstructVersion}")
    mapstruct("org.mapstruct:mapstruct-processor:${mapstructVersion}")

    // Testing
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

sourceSets {
    main {
        ext.originalJavaSrcDirs = java.srcDirs
        java.srcDir "${generatedMapperSourcesDir}"
    }
}

task generateMainMapperClasses(type: JavaCompile) {
    ext.aptDumpDir = file("${buildDir}/tmp/apt/mapstruct")
    destinationDir = aptDumpDir

    classpath = compileJava.classpath + configurations.mapstruct
    source = sourceSets.main.originalJavaSrcDirs
    ext.sourceDestDir = file("$generatedMapperSourcesDir")

    options.define(
            compilerArgs: [
                    "-nowarn",
                    "-proc:only",
                    "-encoding", "UTF-8",
                    "-processor", "org.mapstruct.ap.MappingProcessor",
                    "-s", sourceDestDir.absolutePath,
                    "-source", sourceCompatibility,
                    "-target", targetCompatibility,
            ]
    );

    inputs.dir source
    outputs.dir generatedMapperSourcesDir;
    doFirst {
        sourceDestDir.mkdirs()
    }
    doLast {
        aptDumpDir.delete()
    }
}
compileJava.dependsOn generateMainMapperClasses